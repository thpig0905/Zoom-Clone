"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Locations = void 0;
const resource_1 = require("cloudflare/resource");
const core_1 = require("cloudflare/core");
const BotClassAPI = __importStar(require("cloudflare/resources/radar/http/locations/bot-class"));
const DeviceTypeAPI = __importStar(require("cloudflare/resources/radar/http/locations/device-type"));
const HTTPMethodAPI = __importStar(require("cloudflare/resources/radar/http/locations/http-method"));
const HTTPProtocolAPI = __importStar(require("cloudflare/resources/radar/http/locations/http-protocol"));
const IPVersionAPI = __importStar(require("cloudflare/resources/radar/http/locations/ip-version"));
const OSAPI = __importStar(require("cloudflare/resources/radar/http/locations/os"));
const TLSVersionAPI = __importStar(require("cloudflare/resources/radar/http/locations/tls-version"));
class Locations extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.botClass = new BotClassAPI.BotClass(this._client);
        this.deviceType = new DeviceTypeAPI.DeviceType(this._client);
        this.httpProtocol = new HTTPProtocolAPI.HTTPProtocol(this._client);
        this.httpMethod = new HTTPMethodAPI.HTTPMethod(this._client);
        this.ipVersion = new IPVersionAPI.IPVersion(this._client);
        this.os = new OSAPI.OS(this._client);
        this.tlsVersion = new TLSVersionAPI.TLSVersion(this._client);
    }
    get(query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.get({}, query);
        }
        return this._client.get('/radar/http/top/locations', { query, ...options })._thenUnwrap((obj) => obj.result);
    }
}
exports.Locations = Locations;
(function (Locations) {
    Locations.BotClass = BotClassAPI.BotClass;
    Locations.DeviceType = DeviceTypeAPI.DeviceType;
    Locations.HTTPProtocol = HTTPProtocolAPI.HTTPProtocol;
    Locations.HTTPMethod = HTTPMethodAPI.HTTPMethod;
    Locations.IPVersion = IPVersionAPI.IPVersion;
    Locations.OS = OSAPI.OS;
    Locations.TLSVersion = TLSVersionAPI.TLSVersion;
})(Locations = exports.Locations || (exports.Locations = {}));
//# sourceMappingURL=locations.js.map