"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSL = void 0;
const resource_1 = require("cloudflare/resource");
const AnalyzeAPI = __importStar(require("cloudflare/resources/ssl/analyze"));
const RecommendationsAPI = __importStar(require("cloudflare/resources/ssl/recommendations"));
const VerificationAPI = __importStar(require("cloudflare/resources/ssl/verification"));
const CertificatePacksAPI = __importStar(require("cloudflare/resources/ssl/certificate-packs/certificate-packs"));
const UniversalAPI = __importStar(require("cloudflare/resources/ssl/universal/universal"));
class SSL extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.analyze = new AnalyzeAPI.Analyze(this._client);
        this.certificatePacks = new CertificatePacksAPI.CertificatePacks(this._client);
        this.recommendations = new RecommendationsAPI.Recommendations(this._client);
        this.universal = new UniversalAPI.Universal(this._client);
        this.verification = new VerificationAPI.VerificationResource(this._client);
    }
}
exports.SSL = SSL;
(function (SSL) {
    SSL.Analyze = AnalyzeAPI.Analyze;
    SSL.CertificatePacks = CertificatePacksAPI.CertificatePacks;
    SSL.CertificatePackListResponsesSinglePage = CertificatePacksAPI.CertificatePackListResponsesSinglePage;
    SSL.Recommendations = RecommendationsAPI.Recommendations;
    SSL.Universal = UniversalAPI.Universal;
    SSL.VerificationResource = VerificationAPI.VerificationResource;
})(SSL = exports.SSL || (exports.SSL = {}));
//# sourceMappingURL=ssl.js.map