import * as Core from 'cloudflare/core';
import { APIResource } from 'cloudflare/resource';
import * as VersionsAPI from 'cloudflare/resources/rulesets/phases/versions';
import * as RulesAPI from 'cloudflare/resources/rulesets/rules';
import * as RulesetsAPI from 'cloudflare/resources/rulesets/rulesets';
import { RulesetsSinglePage } from 'cloudflare/resources/rulesets/rulesets';
export declare class Versions extends APIResource {
    /**
     * Fetches the versions of an account or zone entry point ruleset.
     */
    list(rulesetPhase: RulesetsAPI.PhaseParam, params?: VersionListParams, options?: Core.RequestOptions): Core.PagePromise<RulesetsSinglePage, RulesetsAPI.Ruleset>;
    list(rulesetPhase: RulesetsAPI.PhaseParam, options?: Core.RequestOptions): Core.PagePromise<RulesetsSinglePage, RulesetsAPI.Ruleset>;
    /**
     * Fetches a specific version of an account or zone entry point ruleset.
     */
    get(rulesetPhase: RulesetsAPI.PhaseParam, rulesetVersion: string, params?: VersionGetParams, options?: Core.RequestOptions): Core.APIPromise<VersionGetResponse>;
    get(rulesetPhase: RulesetsAPI.PhaseParam, rulesetVersion: string, options?: Core.RequestOptions): Core.APIPromise<VersionGetResponse>;
}
/**
 * A ruleset object.
 */
export interface VersionGetResponse {
    /**
     * The unique ID of the ruleset.
     */
    id: string;
    /**
     * The kind of the ruleset.
     */
    kind: RulesetsAPI.Kind;
    /**
     * The timestamp of when the ruleset was last modified.
     */
    last_updated: string;
    /**
     * The human-readable name of the ruleset.
     */
    name: string;
    /**
     * The phase of the ruleset.
     */
    phase: RulesetsAPI.Phase;
    /**
     * The list of rules in the ruleset.
     */
    rules: Array<RulesAPI.BlockRule | RulesAPI.ChallengeRule | RulesAPI.CompressResponseRule | RulesAPI.ExecuteRule | RulesAPI.JSChallengeRule | RulesAPI.LogRule | RulesAPI.ManagedChallengeRule | RulesAPI.RedirectRule | RulesAPI.RewriteRule | RulesAPI.RouteRule | RulesAPI.ScoreRule | RulesAPI.ServeErrorRule | RulesAPI.SetConfigRule | RulesAPI.SkipRule | RulesAPI.SetCacheSettingsRule>;
    /**
     * The version of the ruleset.
     */
    version: string;
    /**
     * An informative description of the ruleset.
     */
    description?: string;
}
export interface VersionListParams {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    account_id?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zone_id?: string;
}
export interface VersionGetParams {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    account_id?: string;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zone_id?: string;
}
export declare namespace Versions {
    export import VersionGetResponse = VersionsAPI.VersionGetResponse;
    export import VersionListParams = VersionsAPI.VersionListParams;
    export import VersionGetParams = VersionsAPI.VersionGetParams;
}
export { RulesetsSinglePage };
//# sourceMappingURL=versions.d.ts.map