"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevicesSinglePage = exports.Devices = void 0;
const resource_1 = require("cloudflare/resource");
const DevicesAPI = __importStar(require("cloudflare/resources/zero-trust/devices/devices"));
const DEXTestsAPI = __importStar(require("cloudflare/resources/zero-trust/devices/dex-tests"));
const NetworksAPI = __importStar(require("cloudflare/resources/zero-trust/devices/networks"));
const OverrideCodesAPI = __importStar(require("cloudflare/resources/zero-trust/devices/override-codes"));
const RevokeAPI = __importStar(require("cloudflare/resources/zero-trust/devices/revoke"));
const SettingsAPI = __importStar(require("cloudflare/resources/zero-trust/devices/settings"));
const UnrevokeAPI = __importStar(require("cloudflare/resources/zero-trust/devices/unrevoke"));
const PoliciesAPI = __importStar(require("cloudflare/resources/zero-trust/devices/policies/policies"));
const PostureAPI = __importStar(require("cloudflare/resources/zero-trust/devices/posture/posture"));
const pagination_1 = require("cloudflare/pagination");
class Devices extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.dexTests = new DEXTestsAPI.DEXTests(this._client);
        this.networks = new NetworksAPI.Networks(this._client);
        this.policies = new PoliciesAPI.Policies(this._client);
        this.posture = new PostureAPI.Posture(this._client);
        this.revoke = new RevokeAPI.Revoke(this._client);
        this.settings = new SettingsAPI.Settings(this._client);
        this.unrevoke = new UnrevokeAPI.Unrevoke(this._client);
        this.overrideCodes = new OverrideCodesAPI.OverrideCodes(this._client);
    }
    /**
     * Fetches a list of enrolled devices.
     */
    list(params, options) {
        const { account_id } = params;
        return this._client.getAPIList(`/accounts/${account_id}/devices`, DevicesSinglePage, options);
    }
    /**
     * Fetches details for a single device.
     */
    get(deviceId, params, options) {
        const { account_id } = params;
        return this._client.get(`/accounts/${account_id}/devices/${deviceId}`, options)._thenUnwrap((obj) => obj.result);
    }
}
exports.Devices = Devices;
class DevicesSinglePage extends pagination_1.SinglePage {
}
exports.DevicesSinglePage = DevicesSinglePage;
(function (Devices) {
    Devices.DevicesSinglePage = DevicesAPI.DevicesSinglePage;
    Devices.DEXTests = DEXTestsAPI.DEXTests;
    Devices.SchemaHTTPSSinglePage = DEXTestsAPI.SchemaHTTPSSinglePage;
    Devices.Networks = NetworksAPI.Networks;
    Devices.DeviceNetworksSinglePage = NetworksAPI.DeviceNetworksSinglePage;
    Devices.Policies = PoliciesAPI.Policies;
    Devices.SettingsPoliciesSinglePage = PoliciesAPI.SettingsPoliciesSinglePage;
    Devices.Posture = PostureAPI.Posture;
    Devices.DevicePostureRulesSinglePage = PostureAPI.DevicePostureRulesSinglePage;
    Devices.Revoke = RevokeAPI.Revoke;
    Devices.Settings = SettingsAPI.Settings;
    Devices.Unrevoke = UnrevokeAPI.Unrevoke;
    Devices.OverrideCodes = OverrideCodesAPI.OverrideCodes;
})(Devices = exports.Devices || (exports.Devices = {}));
//# sourceMappingURL=devices.js.map